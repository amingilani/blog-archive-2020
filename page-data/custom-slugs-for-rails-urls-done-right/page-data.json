{"componentChunkName":"component---node-modules-gatsby-theme-medium-to-own-blog-src-templates-blog-post-js","path":"/custom-slugs-for-rails-urls-done-right/","result":{"data":{"site":{"siteMetadata":{"siteUrl":"https://amin.gilani.me/blog","githubUrl":"https://github.com/amingilani/blog"}},"mdx":{"fields":{"slug":"/custom-slugs-for-rails-urls-done-right/"},"excerpt":"I’ve seen a lot of examples of this online, and it took a while for me to get it right, so I decided to document it. The two cases I’ve used…","timeToRead":2,"frontmatter":{"title":"Custom slugs for Rails URLs done right","description":"I’ve seen a lot of examples of this online, and it took a while for me to get it right, so I decided to document it.","categories":[],"date":"July 14, 2017","canonical_link":"https://medium.com/@gilani/using-custom-slugs-for-rails-urls-500eb3f58f3c"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Custom slugs for Rails URLs done right\",\n  \"description\": \"I’ve seen a lot of examples of this online, and it took a while for me to get it right, so I decided to document it.\",\n  \"date\": \"2017-07-14T22:21:04.933Z\",\n  \"categories\": [],\n  \"published\": true,\n  \"canonical_link\": \"https://medium.com/@gilani/using-custom-slugs-for-rails-urls-500eb3f58f3c\",\n  \"redirect_from\": [\"/using-custom-slugs-for-rails-urls-500eb3f58f3c\"]\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"I\\u2019ve seen a lot of examples of this online, and it took a while for me to get it right, so I decided to document it.\"), mdx(\"p\", null, \"The two cases I\\u2019ve used this for:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Vanity URLs, e.g. trying to open a user\\u2019s profile at \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"/u/amingilani\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Obfuscated URLs, e.g. trying to make the \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://hackernoon.com/tagged/url\",\n    \"target\": \"_blank\",\n    \"rel\": \"nofollow noopener noreferrer\"\n  }), \"URL\"), \" difficult to guess such as\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"/transactions/601585f7\\u20130f4a-41e8-bd04-b2eb24262fb4\"))), mdx(\"p\", null, \"Both cases differ only by the fact that the slug is randomly generated in the latter.\"), mdx(\"p\", null, \"Quick definitions:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Slug\"), \": part of the URL to identify the record\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Primary key\"), \": a unique identifier for database records\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"UUID\"), \": Universal unique identifier, a 128 bit generated identifier that depending on the implementation is either guaranteed or is very likely to be unique.\")), mdx(\"p\", null, \"Overview:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"We\\u2019ll add a unique \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"slug\"), \" column to our database table\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"We\\u2019ll generate a unique slug on creation (only for the 2nd use-case)\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"We\\u2019ll use the slugs in URLs\")), mdx(\"h4\", {\n    \"id\": \"adding-a-slug-column-to-our-database\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h4\"\n  }, {\n    \"href\": \"#adding-a-slug-column-to-our-database\",\n    \"aria-label\": \"adding a slug column to our database permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Adding a \", mdx(\"inlineCode\", {\n    parentName: \"h4\"\n  }, \"slug\"), \" column to our\\xA0database\"), mdx(\"p\", null, \"We\\u2019ll need to ensure that our slug is unique, and always present. You can name it \\u201Cusername\\u201D or anything more semantic if it\\u2019s meant to be part of the model.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"class AddSlugToRecommendations < ActiveRecord::Migration[5.1]\\n  def change\\n    add_column :transactions, :slug, :string, null: false\\n    add_index :transactions, :slug, unique: true\\n  end\\nend\\n\")), mdx(\"h4\", {\n    \"id\": \"generating-a-unique-slug-on-creation\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h4\"\n  }, {\n    \"href\": \"#generating-a-unique-slug-on-creation\",\n    \"aria-label\": \"generating a unique slug on creation permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Generating a unique slug on\\xA0creation\"), mdx(\"p\", null, \"We\\u2019ll use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"securerandom\"), \" library that ships with rails to generate a unique UUID. If the UUID (by whatever sorcery) already exists, a new one will be generated instead.\"), mdx(\"p\", null, \"This is only important, if we\\u2019re trying to obfuscate our URLS. Ignore this step if you\\u2019re letting users set something like \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"username\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"class Transaction < ApplicationRecord\\n  before_create :set_slug\\n\\n  private\\n\\n  def set_slug\\n    loop do\\n      self.slug = SecureRandom.uuid\\n      break unless Transaction.where(slug: slug).exists?\\n    end\\n  end\\nend\\n\")), mdx(\"h4\", {\n    \"id\": \"use-the-slug-in-urls\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h4\"\n  }, {\n    \"href\": \"#use-the-slug-in-urls\",\n    \"aria-label\": \"use the slug in urls permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Use the slug in\\xA0URLS\"), mdx(\"p\", null, \"This will have to be set in multiple places:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"use the\\xA0\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \":slug\"), \" param in routes\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"lookup records using the\\xA0\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \":slug\"), \" param\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Override the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Model#to_param\"), \" method to return the\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"slug\"), \" attribute instead of \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"id\"))), mdx(\"p\", null, \"Tell your routes to use the slug param:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"Rails.application.routes.draw do\\n  resources :transactions, param: :slug\\nend\\n\")), mdx(\"p\", null, \"Now your routes will look like this:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"edit_transaction GET    /transactions/:slug/edit(.:format)\\n     transaction GET    /transactions/:slug(.:format)\\n                 PATCH  /transactions/:slug(.:format)\\n                 PUT    /transactions/:slug(.:format)\\n                 DELETE /transactions/:slug(.:format)\\n\")), mdx(\"p\", null, \"For your controller to lookup records by the slug, stop using the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"id\"), \" and use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"slug\"), \" param instead:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"class TransactionsController < ApplicationController\\n  before_action :set_transaction, only: [:show, :edit, :destroy]\\n\\n  private\\n\\n  def set_transaction\\n    @transaction = Transaction.find_by slug: params[:slug]\\n  end\\nend\\n\")), mdx(\"p\", null, \"Let\\u2019s override the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Model#to_param\"), \" method so that \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"form_for @transaction\"), \" works:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"class Transaction < ApplicationRecord\\n...\\n  def to_param\\n    slug\\n  end\\n...\\nend\\n\")), mdx(\"h4\", {\n    \"id\": \"why-my-way-is-the-best\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h4\"\n  }, {\n    \"href\": \"#why-my-way-is-the-best\",\n    \"aria-label\": \"why my way is the best permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Why my way is the\\xA0best\"), mdx(\"p\", null, \"Unless you\\u2019re creating a distributed application with distributed database nodes that need a collision free method to generate primary keys, you don\\u2019t need randomly generated ids. You\\u2019re just looking for a quick and easy way to hack \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://hackernoon.com/tagged/urls\",\n    \"target\": \"_blank\",\n    \"rel\": \"nofollow noopener noreferrer\"\n  }), \"URLS\"), \", which is why this method is awesome.\"), mdx(\"p\", null, \"Using a string as a primary key is significantly slower than an integer during lookups, so every \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Model#children\"), \" call will be slower.\"), mdx(\"p\", null, \"Using a slug for URL lookups means the slow performance will be limited to URL lookups, which is what you wanted in the first place.\"));\n}\n;\nMDXContent.isMDXComponent = true;"},"allWebMentionEntry":{"nodes":[]}},"pageContext":{"id":"9db368da-1aef-53dc-91d8-eac1944c2173","previous":{"id":"142f29b7-4141-5bdf-a5ed-8c3f7d23daaf","fields":{"slug":"/passwords-saved-in-chrome-are-shown-in-your-google-account-in-plaintext/","published":true},"frontmatter":{"redirect_from":["/passwords-saved-in-chrome-are-synced-to-your-google-account-8cd43d90982a"],"title":"Passwords saved in Chrome are shown in your Google Account in Plaintext"}},"next":{"id":"11b96cad-fb4e-5991-83d7-4185b95978a3","fields":{"slug":"/two-welcome-side-effects-of-webpack-in-rails-or-euruko-2017-budapest/","published":true},"frontmatter":{"redirect_from":["/two-welcome-side-effects-of-webpack-in-rails-euruko-2017-budapest-925cc8d7e55"],"title":"Two Welcome Side Effects of Webpack in Rails | EuRuKo 2017 — Budapest"}},"permalink":"https://amin.gilani.me/blog/custom-slugs-for-rails-urls-done-right/","themeOptions":{"plugins":[],"config":{"title":"Amin Shah Gilani","description":"Amin Shah Gilani's blog","shortBio":"Amin is startup interim-CTO, a part-time grad student at Georgia Tech, former startup CTO & CEO, and former editor at Toptal's engineering blog","bio":"Amin is startup interim-CTO, a part-time grad student at Georgia Tech, former startup CTO & CEO, and former editor at Toptal's engineering blog","author":"Amin Shah Gilani","githubUrl":"https://github.com/amingilani/blog","siteUrl":"https://amin.gilani.me/blog/","pathPrefix":"/blog/","social":{"twitter":"amingilani","medium":"@gilani","facebook":"aminshahgilani","github":"amingilani","linkedin":"amingilani","instagram":"amingilani"},"goatCounterCode":null}}}}}